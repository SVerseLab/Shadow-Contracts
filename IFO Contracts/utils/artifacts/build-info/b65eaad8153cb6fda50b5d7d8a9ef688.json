{
	"id": "b65eaad8153cb6fda50b5d7d8a9ef688",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.1",
	"solcLongVersion": "0.8.1+commit.df193b15",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/utils/WhiteList.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.1;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Whitelist is Ownable {\r\n    mapping(address => bool) private whitelist;\r\n\r\n    event WhitelistedAddressAdded(address indexed _user);\r\n    event WhitelistedAddressRemoved(address indexed _user);\r\n\r\n    /**\r\n     * @dev throws if user is not whitelisted.\r\n     * @param _user address\r\n     */\r\n    modifier onlyIfWhitelisted(address _user) {\r\n        require(whitelist[_user]);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev add single address to whitelist\r\n     */\r\n    function addAddressToWhitelist(address _user) external onlyOwner {\r\n        whitelist[_user] = true;\r\n        emit WhitelistedAddressAdded(_user);\r\n    }\r\n\r\n    /**\r\n     * @dev add addresses to whitelist\r\n     */\r\n    function addAddressesToWhitelist(address[] calldata _users) external onlyOwner {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            whitelist[_users[i]] = true;\r\n            emit WhitelistedAddressAdded(_users[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev remove single address from whitelist\r\n     */\r\n    function removeAddressFromWhitelist(address _user) external onlyOwner {\r\n        whitelist[_user] = false;\r\n        emit WhitelistedAddressRemoved(_user);\r\n    }\r\n\r\n    /**\r\n     * @dev remove addresses from whitelist\r\n     */\r\n    function removeAddressesFromWhitelist(address[] calldata _users) external onlyOwner {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            whitelist[_users[i]] = false;\r\n            emit WhitelistedAddressRemoved(_users[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev getter to determine if address is in whitelist\r\n     */\r\n    function isWhitelisted(address _user) public view returns (bool) {\r\n        return whitelist[_user];\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\nimport \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 99999
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x195b2cbb885d06ea30ed9eed359fc0e48d4bef32b542f54f7924f2135655e641\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d644d10d87b16514e05eb98b10140a71df8bf9d4eadf9de81df33d4769fb90e3\",\"dweb:/ipfs/QmZLRJbcbHSkkQXF16o1TLQXhNbAKpztbnwM3RSBWq52dR\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/utils/WhiteList.sol": {
				"Whitelist": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "WhitelistedAddressAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "WhitelistedAddressRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "addAddressToWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_users",
									"type": "address[]"
								}
							],
							"name": "addAddressesToWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "isWhitelisted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_user",
									"type": "address"
								}
							],
							"name": "removeAddressFromWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_users",
									"type": "address[]"
								}
							],
							"name": "removeAddressesFromWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addAddressToWhitelist(address)": {
								"details": "add single address to whitelist"
							},
							"addAddressesToWhitelist(address[])": {
								"details": "add addresses to whitelist"
							},
							"isWhitelisted(address)": {
								"details": "getter to determine if address is in whitelist"
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"removeAddressFromWhitelist(address)": {
								"details": "remove single address from whitelist"
							},
							"removeAddressesFromWhitelist(address[])": {
								"details": "remove addresses from whitelist"
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/utils/WhiteList.sol\":116:1819  contract Whitelist is Ownable {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":964:996  _transferOwnership(_msgSender()) */\n  tag_4\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":983:995  _msgSender() */\n  tag_5\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":983:993  _msgSender */\n  tag_6\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":983:995  _msgSender() */\n  jump\t// in\ntag_5:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":964:982  _transferOwnership */\n  tag_7\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":964:996  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_4:\n    /* \"contracts/utils/WhiteList.sol\":116:1819  contract Whitelist is Ownable {\r... */\n  jump(tag_8)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_6:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2503:2694  function _transferOwnership(address newOwner) internal virtual {\r... */\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2577:2593  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2596:2602  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2613:2630  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2646:2686  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2596:2602  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2646:2686  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2577:2593  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2646:2686  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2503:2694  function _transferOwnership(address newOwner) internal virtual {\r... */\n  pop\n  pop\n  jump\t// out\n    /* \"contracts/utils/WhiteList.sol\":116:1819  contract Whitelist is Ownable {\r... */\ntag_8:\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/utils/WhiteList.sol\":116:1819  contract Whitelist is Ownable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x7b9417c8\n      gt\n      tag_11\n      jumpi\n      dup1\n      0x7b9417c8\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xe2ec6ec3\n      eq\n      tag_9\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_11:\n      dup1\n      0x24953eaa\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x286dd3f5\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x3af32abf\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/utils/WhiteList.sol\":1366:1623  function removeAddressesFromWhitelist(address[] calldata _users) external onlyOwner {\r... */\n    tag_3:\n      tag_12\n      tag_13\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_13:\n      tag_15\n      jump\t// in\n    tag_12:\n      stop\n        /* \"contracts/utils/WhiteList.sol\":1134:1295  function removeAddressFromWhitelist(address _user) external onlyOwner {\r... */\n    tag_4:\n      tag_12\n      tag_17\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_17:\n      tag_19\n      jump\t// in\n        /* \"contracts/utils/WhiteList.sol\":1709:1816  function isWhitelisted(address _user) public view returns (bool) {\r... */\n    tag_5:\n      tag_20\n      tag_21\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_21:\n      tag_22\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1884:1987  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_6:\n      tag_12\n      tag_26\n      jump\t// in\n        /* \"contracts/utils/WhiteList.sol\":590:743  function addAddressToWhitelist(address _user) external onlyOwner {\r... */\n    tag_7:\n      tag_12\n      tag_28\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_28:\n      tag_29\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1243:1330  function owner() public view virtual returns (address) {\r... */\n    tag_8:\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n        /* \"contracts/utils/WhiteList.sol\":809:1058  function addAddressesToWhitelist(address[] calldata _users) external onlyOwner {\r... */\n    tag_9:\n      tag_12\n      tag_35\n      calldatasize\n      0x04\n      tag_14\n      jump\t// in\n    tag_35:\n      tag_36\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2142:2343  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_10:\n      tag_12\n      tag_38\n      calldatasize\n      0x04\n      tag_18\n      jump\t// in\n    tag_38:\n      tag_39\n      jump\t// in\n        /* \"contracts/utils/WhiteList.sol\":1366:1623  function removeAddressesFromWhitelist(address[] calldata _users) external onlyOwner {\r... */\n    tag_15:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      tag_41\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1140  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      jump\t// in\n    tag_41:\n        /* \"contracts/utils/WhiteList.sol\":1466:1475  uint256 i */\n      0x00\n        /* \"contracts/utils/WhiteList.sol\":1461:1616  for (uint256 i = 0; i < _users.length; i++) {\r... */\n    tag_44:\n        /* \"contracts/utils/WhiteList.sol\":1481:1498  i < _users.length */\n      dup2\n      dup2\n      lt\n        /* \"contracts/utils/WhiteList.sol\":1461:1616  for (uint256 i = 0; i < _users.length; i++) {\r... */\n      iszero\n      tag_45\n      jumpi\n        /* \"contracts/utils/WhiteList.sol\":1543:1548  false */\n      0x00\n        /* \"contracts/utils/WhiteList.sol\":1520:1529  whitelist */\n      0x01\n        /* \"contracts/utils/WhiteList.sol\":1520:1540  whitelist[_users[i]] */\n      0x00\n        /* \"contracts/utils/WhiteList.sol\":1530:1536  _users */\n      dup6\n      dup6\n        /* \"contracts/utils/WhiteList.sol\":1537:1538  i */\n      dup6\n        /* \"contracts/utils/WhiteList.sol\":1530:1539  _users[i] */\n      dup2\n      dup2\n      lt\n      tag_47\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_47:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_48\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_48:\n        /* \"contracts/utils/WhiteList.sol\":1520:1540  whitelist[_users[i]] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n        /* \"contracts/utils/WhiteList.sol\":1520:1548  whitelist[_users[i]] = false */\n      dup1\n      sload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/utils/WhiteList.sol\":1594:1600  _users */\n      dup3\n      dup3\n        /* \"contracts/utils/WhiteList.sol\":1601:1602  i */\n      dup3\n        /* \"contracts/utils/WhiteList.sol\":1594:1603  _users[i] */\n      dup2\n      dup2\n      lt\n      tag_49\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_49:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_50\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_50:\n        /* \"contracts/utils/WhiteList.sol\":1568:1604  WhitelistedAddressRemoved(_users[i]) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xf1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/utils/WhiteList.sol\":1500:1503  i++ */\n      dup1\n      tag_51\n      dup2\n      tag_52\n      jump\t// in\n    tag_51:\n      swap2\n      pop\n      pop\n        /* \"contracts/utils/WhiteList.sol\":1461:1616  for (uint256 i = 0; i < _users.length; i++) {\r... */\n      jump(tag_44)\n    tag_45:\n      pop\n        /* \"contracts/utils/WhiteList.sol\":1366:1623  function removeAddressesFromWhitelist(address[] calldata _users) external onlyOwner {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/utils/WhiteList.sol\":1134:1295  function removeAddressFromWhitelist(address _user) external onlyOwner {\r... */\n    tag_19:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      tag_54\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1140  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      jump\t// in\n    tag_54:\n        /* \"contracts/utils/WhiteList.sol\":1215:1231  whitelist[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup2\n      and\n        /* \"contracts/utils/WhiteList.sol\":1234:1239  false */\n      0x00\n        /* \"contracts/utils/WhiteList.sol\":1215:1231  whitelist[_user] */\n      dup2\n      dup2\n      mstore\n        /* \"contracts/utils/WhiteList.sol\":1215:1224  whitelist */\n      0x01\n        /* \"contracts/utils/WhiteList.sol\":1215:1231  whitelist[_user] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"contracts/utils/WhiteList.sol\":1215:1239  whitelist[_user] = false */\n      dup1\n      sload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n      and\n      swap1\n      sstore\n        /* \"contracts/utils/WhiteList.sol\":1255:1287  WhitelistedAddressRemoved(_user) */\n      mload\n      0xf1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a\n      swap2\n        /* \"contracts/utils/WhiteList.sol\":1234:1239  false */\n      swap1\n        /* \"contracts/utils/WhiteList.sol\":1255:1287  WhitelistedAddressRemoved(_user) */\n      log2\n        /* \"contracts/utils/WhiteList.sol\":1134:1295  function removeAddressFromWhitelist(address _user) external onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"contracts/utils/WhiteList.sol\":1709:1816  function isWhitelisted(address _user) public view returns (bool) {\r... */\n    tag_22:\n        /* \"contracts/utils/WhiteList.sol\":1792:1808  whitelist[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/utils/WhiteList.sol\":1768:1772  bool */\n      0x00\n        /* \"contracts/utils/WhiteList.sol\":1792:1808  whitelist[_user] */\n      swap1\n      dup2\n      mstore\n        /* \"contracts/utils/WhiteList.sol\":1792:1801  whitelist */\n      0x01\n        /* \"contracts/utils/WhiteList.sol\":1792:1808  whitelist[_user] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"contracts/utils/WhiteList.sol\":1709:1816  function isWhitelisted(address _user) public view returns (bool) {\r... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1884:1987  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_26:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      tag_58\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1140  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      jump\t// in\n    tag_58:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1949:1979  _transferOwnership(address(0)) */\n      tag_60\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1976:1977  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1949:1967  _transferOwnership */\n      tag_61\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1949:1979  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_60:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1884:1987  function renounceOwnership() public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"contracts/utils/WhiteList.sol\":590:743  function addAddressToWhitelist(address _user) external onlyOwner {\r... */\n    tag_29:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      tag_63\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1140  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      jump\t// in\n    tag_63:\n        /* \"contracts/utils/WhiteList.sol\":666:682  whitelist[_user] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/utils/WhiteList.sol\":685:689  true */\n      0x01\n        /* \"contracts/utils/WhiteList.sol\":666:682  whitelist[_user] */\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"contracts/utils/WhiteList.sol\":666:689  whitelist[_user] = true */\n      dup1\n      sload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n      and\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/utils/WhiteList.sol\":705:735  WhitelistedAddressAdded(_user) */\n      mload\n      0xd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f\n      swap2\n        /* \"contracts/utils/WhiteList.sol\":666:682  whitelist[_user] */\n      swap1\n        /* \"contracts/utils/WhiteList.sol\":705:735  WhitelistedAddressAdded(_user) */\n      log2\n        /* \"contracts/utils/WhiteList.sol\":590:743  function addAddressToWhitelist(address _user) external onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1243:1330  function owner() public view virtual returns (address) {\r... */\n    tag_31:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1289:1296  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1316:1322  _owner */\n      sload\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1243:1330  function owner() public view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"contracts/utils/WhiteList.sol\":809:1058  function addAddressesToWhitelist(address[] calldata _users) external onlyOwner {\r... */\n    tag_36:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      tag_67\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1140  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      jump\t// in\n    tag_67:\n        /* \"contracts/utils/WhiteList.sol\":904:913  uint256 i */\n      0x00\n        /* \"contracts/utils/WhiteList.sol\":899:1051  for (uint256 i = 0; i < _users.length; i++) {\r... */\n    tag_69:\n        /* \"contracts/utils/WhiteList.sol\":919:936  i < _users.length */\n      dup2\n      dup2\n      lt\n        /* \"contracts/utils/WhiteList.sol\":899:1051  for (uint256 i = 0; i < _users.length; i++) {\r... */\n      iszero\n      tag_45\n      jumpi\n        /* \"contracts/utils/WhiteList.sol\":981:985  true */\n      0x01\n        /* \"contracts/utils/WhiteList.sol\":958:967  whitelist */\n      dup1\n        /* \"contracts/utils/WhiteList.sol\":958:978  whitelist[_users[i]] */\n      0x00\n        /* \"contracts/utils/WhiteList.sol\":968:974  _users */\n      dup6\n      dup6\n        /* \"contracts/utils/WhiteList.sol\":975:976  i */\n      dup6\n        /* \"contracts/utils/WhiteList.sol\":968:977  _users[i] */\n      dup2\n      dup2\n      lt\n      tag_72\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_72:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_73\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_73:\n        /* \"contracts/utils/WhiteList.sol\":958:978  whitelist[_users[i]] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n        /* \"contracts/utils/WhiteList.sol\":958:985  whitelist[_users[i]] = true */\n      dup1\n      sload\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/utils/WhiteList.sol\":1029:1035  _users */\n      dup3\n      dup3\n        /* \"contracts/utils/WhiteList.sol\":1036:1037  i */\n      dup3\n        /* \"contracts/utils/WhiteList.sol\":1029:1038  _users[i] */\n      dup2\n      dup2\n      lt\n      tag_74\n      jumpi\n      mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_74:\n      swap1\n      pop\n      0x20\n      mul\n      add\n      0x20\n      dup2\n      add\n      swap1\n      tag_75\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_75:\n        /* \"contracts/utils/WhiteList.sol\":1005:1039  WhitelistedAddressAdded(_users[i]) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts/utils/WhiteList.sol\":938:941  i++ */\n      dup1\n      tag_76\n      dup2\n      tag_52\n      jump\t// in\n    tag_76:\n      swap2\n      pop\n      pop\n        /* \"contracts/utils/WhiteList.sol\":899:1051  for (uint256 i = 0; i < _users.length; i++) {\r... */\n      jump(tag_69)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2142:2343  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_39:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      tag_78\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1140  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1129:1142  _checkOwner() */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2231:2253  newOwner != address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2223:2296  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_80\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_81\n      swap1\n      tag_82\n      jump\t// in\n    tag_81:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_80:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2307:2335  _transferOwnership(newOwner) */\n      tag_83\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2326:2334  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2307:2325  _transferOwnership */\n      tag_61\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2307:2335  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_83:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2142:2343  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1408:1540  function _checkOwner() internal view virtual {\r... */\n    tag_42:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1483:1495  _msgSender() */\n      tag_85\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1483:1493  _msgSender */\n      tag_86\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1483:1495  _msgSender() */\n      jump\t// in\n    tag_85:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1472:1495  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1472:1479  owner() */\n      tag_87\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1472:1477  owner */\n      tag_31\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1472:1479  owner() */\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1472:1495  owner() == _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1464:1532  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_60\n      jumpi\n      mload(0x40)\n      0x08c379a000000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_81\n      swap1\n      tag_90\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2503:2694  function _transferOwnership(address newOwner) internal virtual {\r... */\n    tag_61:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2577:2593  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2596:2602  _owner */\n      dup1\n      sload\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2613:2630  _owner = newOwner */\n      dup4\n      dup2\n      and\n      0xffffffffffffffffffffffff0000000000000000000000000000000000000000\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2646:2686  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2596:2602  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2646:2686  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2577:2593  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2646:2686  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2503:2694  function _transferOwnership(address newOwner) internal virtual {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_86:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":14:343   */\n    tag_18:\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:96   */\n      iszero\n      tag_95\n      jumpi\n        /* \"#utility.yul\":147:153   */\n      dup1\n        /* \"#utility.yul\":139:145   */\n      dup2\n        /* \"#utility.yul\":132:154   */\n      revert\n        /* \"#utility.yul\":94:96   */\n    tag_95:\n        /* \"#utility.yul\":191:200   */\n      dup2\n        /* \"#utility.yul\":178:201   */\n      calldataload\n        /* \"#utility.yul\":241:283   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":234:239   */\n      dup2\n        /* \"#utility.yul\":230:284   */\n      and\n        /* \"#utility.yul\":223:228   */\n      dup2\n        /* \"#utility.yul\":220:285   */\n      eq\n        /* \"#utility.yul\":210:212   */\n      tag_96\n      jumpi\n        /* \"#utility.yul\":304:310   */\n      dup2\n        /* \"#utility.yul\":296:302   */\n      dup3\n        /* \"#utility.yul\":289:311   */\n      revert\n        /* \"#utility.yul\":210:212   */\n    tag_96:\n        /* \"#utility.yul\":332:337   */\n      swap4\n        /* \"#utility.yul\":84:343   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":348:1014   */\n    tag_14:\n      0x00\n      dup1\n        /* \"#utility.yul\":495:497   */\n      0x20\n        /* \"#utility.yul\":483:492   */\n      dup4\n        /* \"#utility.yul\":474:481   */\n      dup6\n        /* \"#utility.yul\":470:493   */\n      sub\n        /* \"#utility.yul\":466:498   */\n      slt\n        /* \"#utility.yul\":463:465   */\n      iszero\n      tag_98\n      jumpi\n        /* \"#utility.yul\":516:522   */\n      dup1\n        /* \"#utility.yul\":508:514   */\n      dup2\n        /* \"#utility.yul\":501:523   */\n      revert\n        /* \"#utility.yul\":463:465   */\n    tag_98:\n        /* \"#utility.yul\":561:570   */\n      dup3\n        /* \"#utility.yul\":548:571   */\n      calldataload\n        /* \"#utility.yul\":590:608   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":631:633   */\n      dup1\n        /* \"#utility.yul\":623:629   */\n      dup3\n        /* \"#utility.yul\":620:634   */\n      gt\n        /* \"#utility.yul\":617:619   */\n      iszero\n      tag_99\n      jumpi\n        /* \"#utility.yul\":652:658   */\n      dup3\n        /* \"#utility.yul\":644:650   */\n      dup4\n        /* \"#utility.yul\":637:659   */\n      revert\n        /* \"#utility.yul\":617:619   */\n    tag_99:\n        /* \"#utility.yul\":695:701   */\n      dup2\n        /* \"#utility.yul\":684:693   */\n      dup6\n        /* \"#utility.yul\":680:702   */\n      add\n        /* \"#utility.yul\":670:702   */\n      swap2\n      pop\n        /* \"#utility.yul\":740:747   */\n      dup6\n        /* \"#utility.yul\":733:737   */\n      0x1f\n        /* \"#utility.yul\":729:731   */\n      dup4\n        /* \"#utility.yul\":725:738   */\n      add\n        /* \"#utility.yul\":721:748   */\n      slt\n        /* \"#utility.yul\":711:713   */\n      tag_100\n      jumpi\n        /* \"#utility.yul\":767:773   */\n      dup3\n        /* \"#utility.yul\":759:765   */\n      dup4\n        /* \"#utility.yul\":752:774   */\n      revert\n        /* \"#utility.yul\":711:713   */\n    tag_100:\n        /* \"#utility.yul\":812:814   */\n      dup2\n        /* \"#utility.yul\":799:815   */\n      calldataload\n        /* \"#utility.yul\":838:840   */\n      dup2\n        /* \"#utility.yul\":830:836   */\n      dup2\n        /* \"#utility.yul\":827:841   */\n      gt\n        /* \"#utility.yul\":824:826   */\n      iszero\n      tag_101\n      jumpi\n        /* \"#utility.yul\":859:865   */\n      dup4\n        /* \"#utility.yul\":851:857   */\n      dup5\n        /* \"#utility.yul\":844:866   */\n      revert\n        /* \"#utility.yul\":824:826   */\n    tag_101:\n        /* \"#utility.yul\":918:925   */\n      dup7\n        /* \"#utility.yul\":913:915   */\n      0x20\n        /* \"#utility.yul\":907:909   */\n      dup1\n        /* \"#utility.yul\":899:905   */\n      dup4\n        /* \"#utility.yul\":895:910   */\n      mul\n        /* \"#utility.yul\":891:893   */\n      dup6\n        /* \"#utility.yul\":887:911   */\n      add\n        /* \"#utility.yul\":883:916   */\n      add\n        /* \"#utility.yul\":880:926   */\n      gt\n        /* \"#utility.yul\":877:879   */\n      iszero\n      tag_102\n      jumpi\n        /* \"#utility.yul\":944:950   */\n      dup4\n        /* \"#utility.yul\":936:942   */\n      dup5\n        /* \"#utility.yul\":929:951   */\n      revert\n        /* \"#utility.yul\":877:879   */\n    tag_102:\n        /* \"#utility.yul\":980:982   */\n      0x20\n        /* \"#utility.yul\":972:983   */\n      swap3\n      swap1\n      swap3\n      add\n      swap7\n        /* \"#utility.yul\":1002:1008   */\n      swap2\n      swap6\n      pop\n        /* \"#utility.yul\":453:1014   */\n      swap1\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1019:1245   */\n    tag_33:\n        /* \"#utility.yul\":1195:1237   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1183:1238   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1165:1239   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1153:1155   */\n      0x20\n        /* \"#utility.yul\":1138:1156   */\n      add\n      swap1\n        /* \"#utility.yul\":1120:1245   */\n      jump\t// out\n        /* \"#utility.yul\":1250:1437   */\n    tag_24:\n        /* \"#utility.yul\":1415:1429   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1408:1430   */\n      iszero\n        /* \"#utility.yul\":1390:1431   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1378:1380   */\n      0x20\n        /* \"#utility.yul\":1363:1381   */\n      add\n      swap1\n        /* \"#utility.yul\":1345:1437   */\n      jump\t// out\n        /* \"#utility.yul\":1442:1844   */\n    tag_82:\n        /* \"#utility.yul\":1644:1646   */\n      0x20\n        /* \"#utility.yul\":1626:1647   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":1683:1685   */\n      0x26\n        /* \"#utility.yul\":1663:1681   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":1656:1686   */\n      mstore\n        /* \"#utility.yul\":1722:1756   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":1717:1719   */\n      0x40\n        /* \"#utility.yul\":1702:1720   */\n      dup3\n      add\n        /* \"#utility.yul\":1695:1757   */\n      mstore\n        /* \"#utility.yul\":1793:1801   */\n      0x6464726573730000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1788:1790   */\n      0x60\n        /* \"#utility.yul\":1773:1791   */\n      dup3\n      add\n        /* \"#utility.yul\":1766:1802   */\n      mstore\n        /* \"#utility.yul\":1834:1837   */\n      0x80\n        /* \"#utility.yul\":1819:1838   */\n      add\n      swap1\n        /* \"#utility.yul\":1616:1844   */\n      jump\t// out\n        /* \"#utility.yul\":1849:2205   */\n    tag_90:\n        /* \"#utility.yul\":2051:2053   */\n      0x20\n        /* \"#utility.yul\":2033:2054   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2070:2088   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":2063:2093   */\n      mstore\n        /* \"#utility.yul\":2129:2163   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":2124:2126   */\n      0x40\n        /* \"#utility.yul\":2109:2127   */\n      dup3\n      add\n        /* \"#utility.yul\":2102:2164   */\n      mstore\n        /* \"#utility.yul\":2196:2198   */\n      0x60\n        /* \"#utility.yul\":2181:2199   */\n      add\n      swap1\n        /* \"#utility.yul\":2023:2205   */\n      jump\t// out\n        /* \"#utility.yul\":2210:2563   */\n    tag_52:\n      0x00\n        /* \"#utility.yul\":2280:2346   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":2273:2278   */\n      dup3\n        /* \"#utility.yul\":2270:2347   */\n      eq\n        /* \"#utility.yul\":2267:2269   */\n      iszero\n      tag_108\n      jumpi\n        /* \"#utility.yul\":2382:2459   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2377:2380   */\n      dup2\n        /* \"#utility.yul\":2370:2460   */\n      mstore\n        /* \"#utility.yul\":2483:2487   */\n      0x11\n        /* \"#utility.yul\":2480:2481   */\n      0x04\n        /* \"#utility.yul\":2473:2488   */\n      mstore\n        /* \"#utility.yul\":2513:2517   */\n      0x24\n        /* \"#utility.yul\":2508:2511   */\n      dup2\n        /* \"#utility.yul\":2501:2518   */\n      revert\n        /* \"#utility.yul\":2267:2269   */\n    tag_108:\n      pop\n        /* \"#utility.yul\":2555:2556   */\n      0x01\n        /* \"#utility.yul\":2544:2557   */\n      add\n      swap1\n        /* \"#utility.yul\":2257:2563   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220466bbfbffbc0a1c54b21843db49b2d0dce4fab0e2fe8d436831bd25b4421c06f64736f6c63430008010033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061002161001c610026565b61002a565b61007a565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61089b806100896000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637b9417c81161005b5780637b9417c8146100e65780638da5cb5b146100f9578063e2ec6ec31461010e578063f2fde38b1461012157610088565b806324953eaa1461008d578063286dd3f5146100a25780633af32abf146100b5578063715018a6146100de575b600080fd5b6100a061009b3660046106da565b610134565b005b6100a06100b036600461069f565b610295565b6100c86100c336600461069f565b610311565b6040516100d5919061076a565b60405180910390f35b6100a061033c565b6100a06100f436600461069f565b610350565b6101016103d2565b6040516100d59190610749565b6100a061011c3660046106da565b6103ee565b6100a061012f36600461069f565b610549565b61013c6105b3565b60005b8181101561029057600060016000858585818110610186577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061019b919061069f565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055828282818110610227577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061023c919061069f565b73ffffffffffffffffffffffffffffffffffffffff167ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a60405160405180910390a28061028881610807565b91505061013f565b505050565b61029d6105b3565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9190a250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6103446105b3565b61034e6000610626565b565b6103586105b3565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909217909155517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9190a250565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6103f66105b3565b60005b8181101561029057600180600085858581811061043f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610454919061069f565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558282828181106104e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906104f5919061069f565b73ffffffffffffffffffffffffffffffffffffffff167fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f60405160405180910390a28061054181610807565b9150506103f9565b6105516105b3565b73ffffffffffffffffffffffffffffffffffffffff81166105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e90610775565b60405180910390fd5b6105b081610626565b50565b6105bb61069b565b73ffffffffffffffffffffffffffffffffffffffff166105d96103d2565b73ffffffffffffffffffffffffffffffffffffffff161461034e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e906107d2565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b6000602082840312156106b0578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106d3578182fd5b9392505050565b600080602083850312156106ec578081fd5b823567ffffffffffffffff80821115610703578283fd5b818501915085601f830112610716578283fd5b813581811115610724578384fd5b8660208083028501011115610737578384fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561085e577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b506001019056fea2646970667358221220466bbfbffbc0a1c54b21843db49b2d0dce4fab0e2fe8d436831bd25b4421c06f64736f6c63430008010033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21 PUSH2 0x1C PUSH2 0x26 JUMP JUMPDEST PUSH2 0x2A JUMP JUMPDEST PUSH2 0x7A JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x89B DUP1 PUSH2 0x89 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B9417C8 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x7B9417C8 EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0xE2EC6EC3 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x121 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x24953EAA EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x286DD3F5 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x134 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x311 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x76A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH2 0x101 PUSH2 0x3D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x749 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x3EE JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x549 JUMP JUMPDEST PUSH2 0x13C PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x186 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x227 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF1ABF01A1043B7C244D128E8595CF0C1D10743B022B03A02DFFD8CA3BF729F5A PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH2 0x288 DUP2 PUSH2 0x807 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x13F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x29D PUSH2 0x5B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD PUSH32 0xF1ABF01A1043B7C244D128E8595CF0C1D10743B022B03A02DFFD8CA3BF729F5A SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x344 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x34E PUSH1 0x0 PUSH2 0x626 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x358 PUSH2 0x5B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD PUSH32 0xD1BBA68C128CC3F427E5831B3C6F99F480B6EFA6B9E80C757768F6124158CC3F SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x290 JUMPI PUSH1 0x1 DUP1 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x43F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x4E0 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4F5 SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD1BBA68C128CC3F427E5831B3C6F99F480B6EFA6B9E80C757768F6124158CC3F PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH2 0x541 DUP2 PUSH2 0x807 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x551 PUSH2 0x5B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x5A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59E SWAP1 PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5B0 DUP2 PUSH2 0x626 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5BB PUSH2 0x69B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5D9 PUSH2 0x3D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x34E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59E SWAP1 PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x6D3 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6EC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x703 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x716 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x724 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x737 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x85E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID PUSH12 0xBFBFFBC0A1C54B21843DB49B 0x2D 0xD 0xCE 0x4F 0xAB 0xE 0x2F 0xE8 0xD4 CALLDATASIZE DUP4 SHL 0xD2 JUMPDEST DIFFICULTY 0x21 0xC0 PUSH16 0x64736F6C634300080100330000000000 ",
							"sourceMap": "116:1703:2:-:0;;;;;;;;;;;;-1:-1:-1;964:32:0;983:12;:10;:12::i;:::-;964:18;:32::i;:::-;116:1703:2;;640:96:1;719:10;640:96;:::o;2503:191:0:-;2577:16;2596:6;;-1:-1:-1;;;;;2613:17:0;;;-1:-1:-1;;;;;;2613:17:0;;;;;;2646:40;;2596:6;;;;;;;2646:40;;2577:16;2646:40;2503:191;;:::o;116:1703:2:-;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2565:3",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:3",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:259:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "139:6:3"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "147:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:3"
															},
															"nodeType": "YulIf",
															"src": "94:2:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "165:36:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "191:9:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "178:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "178:23:3"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "169:5:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "287:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "296:6:3"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "304:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "289:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "289:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "289:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "223:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "234:5:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "241:42:3",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "230:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "230:54:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "220:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "220:65:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "213:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "213:73:3"
															},
															"nodeType": "YulIf",
															"src": "210:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "322:15:3",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "332:5:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "322:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:3",
														"type": ""
													}
												],
												"src": "14:329:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "453:561:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "499:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "508:6:3"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "516:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "501:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "501:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "501:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "474:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "483:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "470:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "470:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "495:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "466:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "466:32:3"
															},
															"nodeType": "YulIf",
															"src": "463:2:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "534:37:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "561:9:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "548:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "548:23:3"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "538:6:3",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "580:28:3",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "590:18:3",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "584:2:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "635:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "644:6:3"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "652:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "637:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "637:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "637:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "623:6:3"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "631:2:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "620:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "620:14:3"
															},
															"nodeType": "YulIf",
															"src": "617:2:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "670:32:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "684:9:3"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "695:6:3"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "680:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "680:22:3"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "674:2:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "750:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "759:6:3"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "767:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "752:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "752:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "752:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "729:2:3"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "733:4:3",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "725:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "725:13:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "740:7:3"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "721:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "721:27:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "714:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "714:35:3"
															},
															"nodeType": "YulIf",
															"src": "711:2:3"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "785:30:3",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "812:2:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "799:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "799:16:3"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "789:6:3",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "842:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "851:6:3"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "859:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "844:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "844:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "844:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "830:6:3"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "838:2:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "827:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "827:14:3"
															},
															"nodeType": "YulIf",
															"src": "824:2:3"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:26:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "936:6:3"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "944:6:3"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:22:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:22:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "891:2:3"
																					},
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "899:6:3"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "907:2:3",
																								"type": "",
																								"value": "32"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "895:3:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "895:15:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "887:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "887:24:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "913:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "883:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "883:33:3"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "918:7:3"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "880:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "880:46:3"
															},
															"nodeType": "YulIf",
															"src": "877:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "962:21:3",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "976:2:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "980:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "972:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "972:11:3"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "962:6:3"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "992:16:3",
															"value": {
																"name": "length",
																"nodeType": "YulIdentifier",
																"src": "1002:6:3"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "992:6:3"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "411:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "422:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "434:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "442:6:3",
														"type": ""
													}
												],
												"src": "348:666:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1120:125:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1130:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1142:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1153:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1138:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1138:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1130:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1172:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1187:6:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1195:42:3",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1183:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1183:55:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1165:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1165:74:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1165:74:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1089:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1100:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1111:4:3",
														"type": ""
													}
												],
												"src": "1019:226:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1345:92:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1355:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1367:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1378:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1363:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1363:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1355:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1397:9:3"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1422:6:3"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1415:6:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1415:14:3"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1408:6:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1408:22:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1390:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1390:41:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1390:41:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1314:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1325:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1336:4:3",
														"type": ""
													}
												],
												"src": "1250:187:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1616:228:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1633:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1644:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1626:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1626:21:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1626:21:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1667:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1678:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1663:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1663:18:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1683:2:3",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1656:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1656:30:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1656:30:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1706:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1717:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1702:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1702:18:3"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1722:34:3",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1695:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1695:62:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1695:62:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1777:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1788:2:3",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1773:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1773:18:3"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1793:8:3",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1766:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1766:36:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1766:36:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1811:27:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1823:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1834:3:3",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1819:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1819:19:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1811:4:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1593:9:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1607:4:3",
														"type": ""
													}
												],
												"src": "1442:402:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2023:182:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2040:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2051:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2033:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2033:21:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2033:21:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2074:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2085:2:3",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2070:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2070:18:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2090:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2063:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2063:30:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2063:30:3"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2113:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2124:2:3",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2109:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2109:18:3"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2129:34:3",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2102:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2102:62:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2102:62:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2173:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2185:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2196:2:3",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2181:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2181:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2173:4:3"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2000:9:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2014:4:3",
														"type": ""
													}
												],
												"src": "1849:356:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2257:306:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2356:172:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ret",
																					"nodeType": "YulIdentifier",
																					"src": "2377:3:3"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2382:77:3",
																					"type": "",
																					"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2370:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2370:90:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2370:90:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2480:1:3",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2483:4:3",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2473:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2473:15:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2473:15:3"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ret",
																					"nodeType": "YulIdentifier",
																					"src": "2508:3:3"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2513:4:3",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2501:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2501:17:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2501:17:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2273:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2280:66:3",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2270:2:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2270:77:3"
															},
															"nodeType": "YulIf",
															"src": "2267:2:3"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2537:20:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2548:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2555:1:3",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2544:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "2544:13:3"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "2537:3:3"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2239:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "2249:3:3",
														"type": ""
													}
												],
												"src": "2210:353:3"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value1, value1) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value1, value1) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value1, value1) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value1, value1) }\n        if gt(add(add(_2, mul(length, 32)), 32), dataEnd) { revert(value1, value1) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        {\n            mstore(ret, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(ret, 0x24)\n        }\n        ret := add(value, 1)\n    }\n}",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100885760003560e01c80637b9417c81161005b5780637b9417c8146100e65780638da5cb5b146100f9578063e2ec6ec31461010e578063f2fde38b1461012157610088565b806324953eaa1461008d578063286dd3f5146100a25780633af32abf146100b5578063715018a6146100de575b600080fd5b6100a061009b3660046106da565b610134565b005b6100a06100b036600461069f565b610295565b6100c86100c336600461069f565b610311565b6040516100d5919061076a565b60405180910390f35b6100a061033c565b6100a06100f436600461069f565b610350565b6101016103d2565b6040516100d59190610749565b6100a061011c3660046106da565b6103ee565b6100a061012f36600461069f565b610549565b61013c6105b3565b60005b8181101561029057600060016000858585818110610186577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061019b919061069f565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055828282818110610227577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061023c919061069f565b73ffffffffffffffffffffffffffffffffffffffff167ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a60405160405180910390a28061028881610807565b91505061013f565b505050565b61029d6105b3565b73ffffffffffffffffffffffffffffffffffffffff811660008181526001602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517ff1abf01a1043b7c244d128e8595cf0c1d10743b022b03a02dffd8ca3bf729f5a9190a250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205460ff1690565b6103446105b3565b61034e6000610626565b565b6103586105b3565b73ffffffffffffffffffffffffffffffffffffffff8116600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909217909155517fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f9190a250565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6103f66105b3565b60005b8181101561029057600180600085858581811061043f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610454919061069f565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790558282828181106104e0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906104f5919061069f565b73ffffffffffffffffffffffffffffffffffffffff167fd1bba68c128cc3f427e5831b3c6f99f480b6efa6b9e80c757768f6124158cc3f60405160405180910390a28061054181610807565b9150506103f9565b6105516105b3565b73ffffffffffffffffffffffffffffffffffffffff81166105a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e90610775565b60405180910390fd5b6105b081610626565b50565b6105bb61069b565b73ffffffffffffffffffffffffffffffffffffffff166105d96103d2565b73ffffffffffffffffffffffffffffffffffffffff161461034e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059e906107d2565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3390565b6000602082840312156106b0578081fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106d3578182fd5b9392505050565b600080602083850312156106ec578081fd5b823567ffffffffffffffff80821115610703578283fd5b818501915085601f830112610716578283fd5b813581811115610724578384fd5b8660208083028501011115610737578384fd5b60209290920196919550909350505050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b901515815260200190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561085e577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b506001019056fea2646970667358221220466bbfbffbc0a1c54b21843db49b2d0dce4fab0e2fe8d436831bd25b4421c06f64736f6c63430008010033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B9417C8 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x7B9417C8 EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xF9 JUMPI DUP1 PUSH4 0xE2EC6EC3 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x121 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x24953EAA EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x286DD3F5 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xDE JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x134 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0xB0 CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x311 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x76A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA0 PUSH2 0x33C JUMP JUMPDEST PUSH2 0xA0 PUSH2 0xF4 CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x350 JUMP JUMPDEST PUSH2 0x101 PUSH2 0x3D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x749 JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x6DA JUMP JUMPDEST PUSH2 0x3EE JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x69F JUMP JUMPDEST PUSH2 0x549 JUMP JUMPDEST PUSH2 0x13C PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x186 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19B SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x227 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x23C SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF1ABF01A1043B7C244D128E8595CF0C1D10743B022B03A02DFFD8CA3BF729F5A PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH2 0x288 DUP2 PUSH2 0x807 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x13F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x29D PUSH2 0x5B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE MLOAD PUSH32 0xF1ABF01A1043B7C244D128E8595CF0C1D10743B022B03A02DFFD8CA3BF729F5A SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x344 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x34E PUSH1 0x0 PUSH2 0x626 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x358 PUSH2 0x5B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD PUSH32 0xD1BBA68C128CC3F427E5831B3C6F99F480B6EFA6B9E80C757768F6124158CC3F SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3F6 PUSH2 0x5B3 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x290 JUMPI PUSH1 0x1 DUP1 PUSH1 0x0 DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x43F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x454 SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x4E0 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4F5 SWAP2 SWAP1 PUSH2 0x69F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xD1BBA68C128CC3F427E5831B3C6F99F480B6EFA6B9E80C757768F6124158CC3F PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH2 0x541 DUP2 PUSH2 0x807 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x3F9 JUMP JUMPDEST PUSH2 0x551 PUSH2 0x5B3 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x5A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59E SWAP1 PUSH2 0x775 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5B0 DUP2 PUSH2 0x626 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5BB PUSH2 0x69B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x5D9 PUSH2 0x3D2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x34E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59E SWAP1 PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6B0 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x6D3 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x6EC JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x703 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x716 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x724 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP1 DUP4 MUL DUP6 ADD ADD GT ISZERO PUSH2 0x737 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x85E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CHAINID PUSH12 0xBFBFFBC0A1C54B21843DB49B 0x2D 0xD 0xCE 0x4F 0xAB 0xE 0x2F 0xE8 0xD4 CALLDATASIZE DUP4 SHL 0xD2 JUMPDEST DIFFICULTY 0x21 0xC0 PUSH16 0x64736F6C634300080100330000000000 ",
							"sourceMap": "116:1703:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1366:257;;;;;;:::i;:::-;;:::i;:::-;;1134:161;;;;;;:::i;:::-;;:::i;1709:107::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1884:103:0;;;:::i;590:153:2:-;;;;;;:::i;:::-;;:::i;1243:87:0:-;;;:::i;:::-;;;;;;;:::i;809:249:2:-;;;;;;:::i;:::-;;:::i;2142:201:0:-;;;;;;:::i;:::-;;:::i;1366:257:2:-;1129:13:0;:11;:13::i;:::-;1466:9:2::1;1461:155;1481:17:::0;;::::1;1461:155;;;1543:5;1520:9;:20;1530:6;;1537:1;1530:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1520:20;;::::0;;::::1;::::0;::::1;::::0;;;;;;-1:-1:-1;1520:20:2;:28;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;1594:6;;1601:1;1594:9;;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1568:36;;;;;;;;;;;;1500:3:::0;::::1;::::0;::::1;:::i;:::-;;;;1461:155;;;;1366:257:::0;;:::o;1134:161::-;1129:13:0;:11;:13::i;:::-;1215:16:2::1;::::0;::::1;1234:5;1215:16:::0;;;:9:::1;:16;::::0;;;;;:24;;;::::1;::::0;;1255:32;::::1;::::0;1234:5;1255:32:::1;1134:161:::0;:::o;1709:107::-;1792:16;;1768:4;1792:16;;;:9;:16;;;;;;;;;1709:107::o;1884:103:0:-;1129:13;:11;:13::i;:::-;1949:30:::1;1976:1;1949:18;:30::i;:::-;1884:103::o:0;590:153:2:-;1129:13:0;:11;:13::i;:::-;666:16:2::1;::::0;::::1;;::::0;;;685:4:::1;666:16;::::0;;;;;;;:23;;;::::1;::::0;;::::1;::::0;;;705:30;::::1;::::0;666:16;705:30:::1;590:153:::0;:::o;1243:87:0:-;1289:7;1316:6;;;1243:87;:::o;809:249:2:-;1129:13:0;:11;:13::i;:::-;904:9:2::1;899:152;919:17:::0;;::::1;899:152;;;981:4;958:9:::0;:20:::1;968:6;;975:1;968:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;958:20;;::::0;;::::1;::::0;::::1;::::0;;;;;;-1:-1:-1;958:20:2;:27;;;::::1;::::0;::::1;;::::0;;;::::1;::::0;;1029:6;;1036:1;1029:9;;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1005:34;;;;;;;;;;;;938:3:::0;::::1;::::0;::::1;:::i;:::-;;;;899:152;;2142:201:0::0;1129:13;:11;:13::i;:::-;2231:22:::1;::::0;::::1;2223:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2307:28;2326:8;2307:18;:28::i;:::-;2142:201:::0;:::o;1408:132::-;1483:12;:10;:12::i;:::-;1472:23;;:7;:5;:7::i;:::-;:23;;;1464:68;;;;;;;;;;;;:::i;2503:191::-;2577:16;2596:6;;;2613:17;;;;;;;;;;2646:40;;2596:6;;;;;;;2646:40;;2577:16;2646:40;2503:191;;:::o;640:96:1:-;719:10;640:96;:::o;14:329:3:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;191:9;178:23;241:42;234:5;230:54;223:5;220:65;210:2;;304:6;296;289:22;210:2;332:5;84:259;-1:-1:-1;;;84:259:3:o;348:666::-;;;495:2;483:9;474:7;470:23;466:32;463:2;;;516:6;508;501:22;463:2;561:9;548:23;590:18;631:2;623:6;620:14;617:2;;;652:6;644;637:22;617:2;695:6;684:9;680:22;670:32;;740:7;733:4;729:2;725:13;721:27;711:2;;767:6;759;752:22;711:2;812;799:16;838:2;830:6;827:14;824:2;;;859:6;851;844:22;824:2;918:7;913:2;907;899:6;895:15;891:2;887:24;883:33;880:46;877:2;;;944:6;936;929:22;877:2;980;972:11;;;;;1002:6;;-1:-1:-1;453:561:3;;-1:-1:-1;;;;453:561:3:o;1019:226::-;1195:42;1183:55;;;;1165:74;;1153:2;1138:18;;1120:125::o;1250:187::-;1415:14;;1408:22;1390:41;;1378:2;1363:18;;1345:92::o;1442:402::-;1644:2;1626:21;;;1683:2;1663:18;;;1656:30;1722:34;1717:2;1702:18;;1695:62;1793:8;1788:2;1773:18;;1766:36;1834:3;1819:19;;1616:228::o;1849:356::-;2051:2;2033:21;;;2070:18;;;2063:30;2129:34;2124:2;2109:18;;2102:62;2196:2;2181:18;;2023:182::o;2210:353::-;;2280:66;2273:5;2270:77;2267:2;;;2382:77;2377:3;2370:90;2483:4;2480:1;2473:15;2513:4;2508:3;2501:17;2267:2;-1:-1:-1;2555:1:3;2544:13;;2257:306::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "440600",
								"executionCost": "22942",
								"totalCost": "463542"
							},
							"external": {
								"addAddressToWhitelist(address)": "23223",
								"addAddressesToWhitelist(address[])": "infinite",
								"isWhitelisted(address)": "1268",
								"owner()": "1068",
								"removeAddressFromWhitelist(address)": "23228",
								"removeAddressesFromWhitelist(address[])": "infinite",
								"renounceOwnership()": "infinite",
								"transferOwnership(address)": "23667"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 964,
									"end": 996,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 983,
									"end": 995,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 983,
									"end": 993,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "6"
								},
								{
									"begin": 983,
									"end": 995,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 983,
									"end": 995,
									"name": "tag",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 983,
									"end": 995,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 964,
									"end": 982,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 964,
									"end": 996,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 964,
									"end": 996,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 964,
									"end": 996,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 1
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 1,
									"value": "[out]"
								},
								{
									"begin": 2503,
									"end": 2694,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 2503,
									"end": 2694,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2577,
									"end": 2593,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2613,
									"end": 2630,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2646,
									"end": 2686,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2646,
									"end": 2686,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2596,
									"end": 2602,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2646,
									"end": 2686,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2646,
									"end": 2686,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2577,
									"end": 2593,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2646,
									"end": 2686,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2503,
									"end": 2694,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2503,
									"end": 2694,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2503,
									"end": 2694,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 116,
									"end": 1819,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220466bbfbffbc0a1c54b21843db49b2d0dce4fab0e2fe8d436831bd25b4421c06f64736f6c63430008010033",
									".code": [
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "7B9417C8"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "7B9417C8"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "8DA5CB5B"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "E2EC6EC3"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "F2FDE38B"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "24953EAA"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "286DD3F5"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "3AF32ABF"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "715018A6"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 116,
											"end": 1819,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "STOP",
											"source": 2
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 590,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 590,
											"end": 743,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "tag",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 590,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1129,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1466,
											"end": 1475,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1481,
											"end": 1498,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1481,
											"end": 1498,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1481,
											"end": 1498,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1543,
											"end": 1548,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1520,
											"end": 1529,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1530,
											"end": 1536,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1536,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1537,
											"end": 1538,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "tag",
											"source": 2,
											"value": "47"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 1530,
											"end": 1539,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1520,
											"end": 1540,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00"
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1520,
											"end": 1548,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1600,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1600,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1601,
											"end": 1602,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "tag",
											"source": 2,
											"value": "49"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "tag",
											"source": 2,
											"value": "50"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "PUSH",
											"source": 2,
											"value": "F1ABF01A1043B7C244D128E8595CF0C1D10743B022B03A02DFFD8CA3BF729F5A"
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1568,
											"end": 1604,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1500,
											"end": 1503,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1461,
											"end": 1616,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1366,
											"end": 1623,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1129,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1234,
											"end": 1239,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1224,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1231,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1239,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1239,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1239,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00"
										},
										{
											"begin": 1215,
											"end": 1239,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1239,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1215,
											"end": 1239,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1255,
											"end": 1287,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1255,
											"end": 1287,
											"name": "PUSH",
											"source": 2,
											"value": "F1ABF01A1043B7C244D128E8595CF0C1D10743B022B03A02DFFD8CA3BF729F5A"
										},
										{
											"begin": 1255,
											"end": 1287,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1234,
											"end": 1239,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1255,
											"end": 1287,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1134,
											"end": 1295,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1768,
											"end": 1772,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1801,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "PUSH",
											"source": 2,
											"value": "FF"
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1792,
											"end": 1808,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1709,
											"end": 1816,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1129,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1949,
											"end": 1979,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1976,
											"end": 1977,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1949,
											"end": 1967,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1949,
											"end": 1979,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1949,
											"end": 1979,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1949,
											"end": 1979,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1884,
											"end": 1987,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 590,
											"end": 743,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1129,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 666,
											"end": 682,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 666,
											"end": 682,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 666,
											"end": 682,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 685,
											"end": 689,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 666,
											"end": 682,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 666,
											"end": 682,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 666,
											"end": 682,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00"
										},
										{
											"begin": 666,
											"end": 689,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 666,
											"end": 689,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 705,
											"end": 735,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 705,
											"end": 735,
											"name": "PUSH",
											"source": 2,
											"value": "D1BBA68C128CC3F427E5831B3C6F99F480B6EFA6B9E80C757768F6124158CC3F"
										},
										{
											"begin": 705,
											"end": 735,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 666,
											"end": 682,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 705,
											"end": 735,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 590,
											"end": 743,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 590,
											"end": 743,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1289,
											"end": 1296,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1316,
											"end": 1322,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1316,
											"end": 1322,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1316,
											"end": 1322,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1243,
											"end": 1330,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "tag",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 809,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1129,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 904,
											"end": 913,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 899,
											"end": 1051,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 899,
											"end": 1051,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 919,
											"end": 936,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 919,
											"end": 936,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 919,
											"end": 936,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 899,
											"end": 1051,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 899,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 899,
											"end": 1051,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 981,
											"end": 985,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 958,
											"end": 967,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 968,
											"end": 974,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 968,
											"end": 974,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 975,
											"end": 976,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 968,
											"end": 977,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 968,
											"end": 977,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 958,
											"end": 978,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 958,
											"end": 978,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 958,
											"end": 978,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 958,
											"end": 978,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 958,
											"end": 978,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00"
										},
										{
											"begin": 958,
											"end": 985,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "OR",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 958,
											"end": 985,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1035,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1035,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "tag",
											"source": 2,
											"value": "75"
										},
										{
											"begin": 1029,
											"end": 1038,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "PUSH",
											"source": 2,
											"value": "D1BBA68C128CC3F427E5831B3C6F99F480B6EFA6B9E80C757768F6124158CC3F"
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1005,
											"end": 1039,
											"name": "LOG2",
											"source": 2
										},
										{
											"begin": 938,
											"end": 941,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 938,
											"end": 941,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 938,
											"end": 941,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 938,
											"end": 941,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 938,
											"end": 941,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 938,
											"end": 941,
											"name": "tag",
											"source": 2,
											"value": "76"
										},
										{
											"begin": 938,
											"end": 941,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 938,
											"end": 941,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 938,
											"end": 941,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 938,
											"end": 941,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 899,
											"end": 1051,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 899,
											"end": 1051,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1129,
											"end": 1140,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "tag",
											"source": 0,
											"value": "78"
										},
										{
											"begin": 1129,
											"end": 1142,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2231,
											"end": 2253,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2231,
											"end": 2253,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2231,
											"end": 2253,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "tag",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2223,
											"end": 2296,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 2335,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2326,
											"end": 2334,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2307,
											"end": 2325,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2307,
											"end": 2335,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2307,
											"end": 2335,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 2307,
											"end": 2335,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2142,
											"end": 2343,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1408,
											"end": 1540,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1408,
											"end": 1540,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1483,
											"end": 1495,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1483,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1483,
											"end": 1495,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1483,
											"end": 1495,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1483,
											"end": 1495,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1472,
											"end": 1495,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1472,
											"end": 1495,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1472,
											"end": 1479,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1472,
											"end": 1477,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 1472,
											"end": 1479,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1472,
											"end": 1479,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1472,
											"end": 1479,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1472,
											"end": 1495,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1472,
											"end": 1495,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1472,
											"end": 1495,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "PUSH",
											"source": 0,
											"value": "8C379A000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1464,
											"end": 1532,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2503,
											"end": 2694,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2503,
											"end": 2694,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2577,
											"end": 2593,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000"
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2613,
											"end": 2630,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2646,
											"end": 2686,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2646,
											"end": 2686,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2596,
											"end": 2602,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2646,
											"end": 2686,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2646,
											"end": 2686,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2577,
											"end": 2593,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2646,
											"end": 2686,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2503,
											"end": 2694,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2503,
											"end": 2694,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2503,
											"end": 2694,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 1
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 343,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 343,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 14,
											"end": 343,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 94,
											"end": 96,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 94,
											"end": 96,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 147,
											"end": 153,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 139,
											"end": 145,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 132,
											"end": 154,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 94,
											"end": 96,
											"name": "tag",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 94,
											"end": 96,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 191,
											"end": 200,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 178,
											"end": 201,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 241,
											"end": 283,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 234,
											"end": 239,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 230,
											"end": 284,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 223,
											"end": 228,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 220,
											"end": 285,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 210,
											"end": 212,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 210,
											"end": 212,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 304,
											"end": 310,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 296,
											"end": 302,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 289,
											"end": 311,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 210,
											"end": 212,
											"name": "tag",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 210,
											"end": 212,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 332,
											"end": 337,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 84,
											"end": 343,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 84,
											"end": 343,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 348,
											"end": 1014,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 348,
											"end": 1014,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 348,
											"end": 1014,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 348,
											"end": 1014,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 495,
											"end": 497,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 483,
											"end": 492,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 474,
											"end": 481,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 470,
											"end": 493,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 466,
											"end": 498,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 463,
											"end": 465,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 463,
											"end": 465,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 463,
											"end": 465,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 516,
											"end": 522,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 501,
											"end": 523,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 463,
											"end": 465,
											"name": "tag",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 463,
											"end": 465,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 561,
											"end": 570,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 548,
											"end": 571,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 590,
											"end": 608,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 631,
											"end": 633,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 623,
											"end": 629,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 620,
											"end": 634,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 617,
											"end": 619,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 617,
											"end": 619,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 617,
											"end": 619,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 652,
											"end": 658,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 644,
											"end": 650,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 637,
											"end": 659,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 617,
											"end": 619,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 617,
											"end": 619,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 695,
											"end": 701,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 684,
											"end": 693,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 680,
											"end": 702,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 670,
											"end": 702,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 670,
											"end": 702,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 740,
											"end": 747,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 733,
											"end": 737,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 729,
											"end": 731,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 725,
											"end": 738,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 721,
											"end": 748,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 711,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 713,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 767,
											"end": 773,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 759,
											"end": 765,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 752,
											"end": 774,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 711,
											"end": 713,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 713,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 812,
											"end": 814,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 799,
											"end": 815,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 838,
											"end": 840,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 830,
											"end": 836,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 827,
											"end": 841,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 824,
											"end": 826,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 824,
											"end": 826,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 824,
											"end": 826,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 859,
											"end": 865,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 851,
											"end": 857,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 844,
											"end": 866,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 824,
											"end": 826,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 824,
											"end": 826,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 918,
											"end": 925,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 913,
											"end": 915,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 907,
											"end": 909,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 899,
											"end": 905,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 895,
											"end": 910,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 891,
											"end": 893,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 887,
											"end": 911,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 883,
											"end": 916,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 880,
											"end": 926,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 877,
											"end": 879,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 877,
											"end": 879,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 877,
											"end": 879,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 944,
											"end": 950,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 936,
											"end": 942,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 929,
											"end": 951,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 877,
											"end": 879,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 877,
											"end": 879,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 980,
											"end": 982,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 972,
											"end": 983,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 972,
											"end": 983,
											"name": "SWAP7",
											"source": 3
										},
										{
											"begin": 1002,
											"end": 1008,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1002,
											"end": 1008,
											"name": "SWAP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 453,
											"end": 1014,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 453,
											"end": 1014,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 453,
											"end": 1014,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1019,
											"end": 1245,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 1019,
											"end": 1245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1195,
											"end": 1237,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1183,
											"end": 1238,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1183,
											"end": 1238,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1183,
											"end": 1238,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1183,
											"end": 1238,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1165,
											"end": 1239,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1165,
											"end": 1239,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1153,
											"end": 1155,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1138,
											"end": 1156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1138,
											"end": 1156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1120,
											"end": 1245,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1250,
											"end": 1437,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1250,
											"end": 1437,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1415,
											"end": 1429,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1415,
											"end": 1429,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1408,
											"end": 1430,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1390,
											"end": 1431,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1390,
											"end": 1431,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1378,
											"end": 1380,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1363,
											"end": 1381,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1363,
											"end": 1381,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1345,
											"end": 1437,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1442,
											"end": 1844,
											"name": "tag",
											"source": 3,
											"value": "82"
										},
										{
											"begin": 1442,
											"end": 1844,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1644,
											"end": 1646,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1626,
											"end": 1647,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1626,
											"end": 1647,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1626,
											"end": 1647,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1683,
											"end": 1685,
											"name": "PUSH",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1663,
											"end": 1681,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1663,
											"end": 1681,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1663,
											"end": 1681,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1656,
											"end": 1686,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1722,
											"end": 1756,
											"name": "PUSH",
											"source": 3,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 1717,
											"end": 1719,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1702,
											"end": 1720,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1702,
											"end": 1720,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1695,
											"end": 1757,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1793,
											"end": 1801,
											"name": "PUSH",
											"source": 3,
											"value": "6464726573730000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1788,
											"end": 1790,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1773,
											"end": 1791,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1766,
											"end": 1802,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1834,
											"end": 1837,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 1819,
											"end": 1838,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1819,
											"end": 1838,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1616,
											"end": 1844,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 1849,
											"end": 2205,
											"name": "tag",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 1849,
											"end": 2205,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2051,
											"end": 2053,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2033,
											"end": 2054,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2033,
											"end": 2054,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2033,
											"end": 2054,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2070,
											"end": 2088,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2070,
											"end": 2088,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2070,
											"end": 2088,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2063,
											"end": 2093,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2129,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 2124,
											"end": 2126,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2109,
											"end": 2127,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2109,
											"end": 2127,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2102,
											"end": 2164,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2196,
											"end": 2198,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2181,
											"end": 2199,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2181,
											"end": 2199,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2023,
											"end": 2205,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 2210,
											"end": 2563,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 2210,
											"end": 2563,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2210,
											"end": 2563,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2280,
											"end": 2346,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2273,
											"end": 2278,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2270,
											"end": 2347,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 2267,
											"end": 2269,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2267,
											"end": 2269,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 2267,
											"end": 2269,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2382,
											"end": 2459,
											"name": "PUSH",
											"source": 3,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2377,
											"end": 2380,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2370,
											"end": 2460,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2483,
											"end": 2487,
											"name": "PUSH",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 2480,
											"end": 2481,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2473,
											"end": 2488,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2513,
											"end": 2517,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2508,
											"end": 2511,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2501,
											"end": 2518,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2267,
											"end": 2269,
											"name": "tag",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 2267,
											"end": 2269,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2555,
											"end": 2556,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2544,
											"end": 2557,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2544,
											"end": 2557,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2257,
											"end": 2563,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"addAddressToWhitelist(address)": "7b9417c8",
							"addAddressesToWhitelist(address[])": "e2ec6ec3",
							"isWhitelisted(address)": "3af32abf",
							"owner()": "8da5cb5b",
							"removeAddressFromWhitelist(address)": "286dd3f5",
							"removeAddressesFromWhitelist(address[])": "24953eaa",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAddressToWhitelist(address)\":{\"details\":\"add single address to whitelist\"},\"addAddressesToWhitelist(address[])\":{\"details\":\"add addresses to whitelist\"},\"isWhitelisted(address)\":{\"details\":\"getter to determine if address is in whitelist\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAddressFromWhitelist(address)\":{\"details\":\"remove single address from whitelist\"},\"removeAddressesFromWhitelist(address[])\":{\"details\":\"remove addresses from whitelist\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/WhiteList.sol\":\"Whitelist\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x195b2cbb885d06ea30ed9eed359fc0e48d4bef32b542f54f7924f2135655e641\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d644d10d87b16514e05eb98b10140a71df8bf9d4eadf9de81df33d4769fb90e3\",\"dweb:/ipfs/QmZLRJbcbHSkkQXF16o1TLQXhNbAKpztbnwM3RSBWq52dR\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"contracts/utils/WhiteList.sol\":{\"keccak256\":\"0x0ecb33d5d02bcd2dc5a42e23ca46dc9637cfb5c550f6c12c611fcc7ef50ec617\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://83ea30dd73f16cf015bb0cf9e211a176426c6aca584b90ac767806721ffe9fce\",\"dweb:/ipfs/QmeutDL3btmgW9FT1UCh8kdaLcXDHUGcpbPabKrZfVzoUN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "contracts/utils/WhiteList.sol:Whitelist",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 143,
								"contract": "contracts/utils/WhiteList.sol:Whitelist",
								"label": "whitelist",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							134
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 135,
							"src": "132:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 134,
										"src": "702:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "702:7:0"
								}
							],
							"contractDependencies": [
								134
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "166:505:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								134
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "717:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "717:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "775:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "806:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "806:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "774:57:0"
									},
									"src": "748:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "953:51:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 124,
																"src": "983:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "983:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "964:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "964:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "964:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "840:93:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "950:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "953:0:0"
									},
									"scope": 112,
									"src": "939:65:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1118:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1129:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1129:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1129:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1153:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "1012:79:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1115:2:0"
									},
									"src": "1097:65:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1298:32:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1316:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1309:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1170:67:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1257:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1289:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1289:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:9:0"
									},
									"scope": 112,
									"src": "1243:87:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1453:87:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1472:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1472:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 124,
																	"src": "1483:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1483:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1472:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1497:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1464:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1464:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1464:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1338:64:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1428:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1453:0:0"
									},
									"scope": 112,
									"src": "1408:132:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1938:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1976:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1968:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1968:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1968:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1949:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1949:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1949:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1548:330:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1928:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1928:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1910:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1938:0:0"
									},
									"scope": 112,
									"src": "1884:103:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2212:131:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2231:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2251:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2243:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2243:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2243:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2231:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2255:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2223:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2223:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2223:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2326:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2307:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2307:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2307:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1995:141:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2202:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2202:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2169:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2169:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2168:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2212:0:0"
									},
									"scope": 112,
									"src": "2142:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2566:128:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2577:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2577:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2596:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2577:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2613:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2622:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2613:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2613:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2667:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2677:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2646:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2646:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2641:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2351:146:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2531:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2531:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2530:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2566:0:0"
									},
									"scope": 112,
									"src": "2503:191:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "673:2024:0"
						}
					],
					"src": "105:2592:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							134
						]
					},
					"id": 135,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:1",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 134,
							"linearizedBaseContracts": [
								134
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 123,
										"nodeType": "Block",
										"src": "702:34:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 120,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 121,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 119,
												"id": 122,
												"nodeType": "Return",
												"src": "712:17:1"
											}
										]
									},
									"id": 124,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:1"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "693:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:1"
									},
									"scope": 134,
									"src": "640:96:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 132,
										"nodeType": "Block",
										"src": "809:32:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 129,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 128,
												"id": 131,
												"nodeType": "Return",
												"src": "819:15:1"
											}
										]
									},
									"id": 133,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:1"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "793:14:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:1"
									},
									"scope": 134,
									"src": "742:99:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 135,
							"src": "608:235:1"
						}
					],
					"src": "86:758:1"
				},
				"id": 1
			},
			"contracts/utils/WhiteList.sol": {
				"ast": {
					"absolutePath": "contracts/utils/WhiteList.sol",
					"exportedSymbols": {
						"Context": [
							134
						],
						"Ownable": [
							112
						],
						"Whitelist": [
							290
						]
					},
					"id": 291,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 136,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 137,
							"nodeType": "ImportDirective",
							"scope": 291,
							"sourceUnit": 113,
							"src": "60:52:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 138,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "138:7:2"
									},
									"id": 139,
									"nodeType": "InheritanceSpecifier",
									"src": "138:7:2"
								}
							],
							"contractDependencies": [
								112,
								134
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 290,
							"linearizedBaseContracts": [
								290,
								112,
								134
							],
							"name": "Whitelist",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 143,
									"mutability": "mutable",
									"name": "whitelist",
									"nodeType": "VariableDeclaration",
									"scope": 290,
									"src": "153:42:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 142,
										"keyType": {
											"id": 140,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "161:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "153:24:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 141,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "172:4:2",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 147,
									"name": "WhitelistedAddressAdded",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 147,
												"src": "234:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "234:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "233:23:2"
									},
									"src": "204:53:2"
								},
								{
									"anonymous": false,
									"id": 151,
									"name": "WhitelistedAddressRemoved",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"indexed": true,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "295:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "295:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "294:23:2"
									},
									"src": "263:55:2"
								},
								{
									"body": {
										"id": 163,
										"nodeType": "Block",
										"src": "463:56:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 157,
																"name": "whitelist",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 143,
																"src": "482:9:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 159,
															"indexExpression": {
																"id": 158,
																"name": "_user",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 154,
																"src": "492:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "482:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 156,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "474:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "474:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 161,
												"nodeType": "ExpressionStatement",
												"src": "474:25:2"
											},
											{
												"id": 162,
												"nodeType": "PlaceholderStatement",
												"src": "510:1:2"
											}
										]
									},
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "326:89:2",
										"text": " @dev throws if user is not whitelisted.\n @param _user address"
									},
									"id": 164,
									"name": "onlyIfWhitelisted",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "448:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "448:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "447:15:2"
									},
									"src": "421:98:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 182,
										"nodeType": "Block",
										"src": "655:88:2",
										"statements": [
											{
												"expression": {
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 172,
															"name": "whitelist",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "666:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 174,
														"indexExpression": {
															"id": 173,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "676:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "666:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 175,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "685:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "666:23:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "666:23:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 179,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "729:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 178,
														"name": "WhitelistedAddressAdded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 147,
														"src": "705:23:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "705:30:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 181,
												"nodeType": "EmitStatement",
												"src": "700:35:2"
											}
										]
									},
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "527:57:2",
										"text": " @dev add single address to whitelist"
									},
									"functionSelector": "7b9417c8",
									"id": 183,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 170,
											"modifierName": {
												"id": 169,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "645:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "645:9:2"
										}
									],
									"name": "addAddressToWhitelist",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 183,
												"src": "621:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "621:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "620:15:2"
									},
									"returnParameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "655:0:2"
									},
									"scope": 290,
									"src": "590:153:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 219,
										"nodeType": "Block",
										"src": "888:170:2",
										"statements": [
											{
												"body": {
													"id": 217,
													"nodeType": "Block",
													"src": "943:108:2",
													"statements": [
														{
															"expression": {
																"id": 209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 203,
																		"name": "whitelist",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 143,
																		"src": "958:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 207,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 204,
																			"name": "_users",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 187,
																			"src": "968:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 206,
																		"indexExpression": {
																			"id": 205,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 193,
																			"src": "975:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "968:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "958:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 208,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "958:27:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 210,
															"nodeType": "ExpressionStatement",
															"src": "958:27:2"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 212,
																			"name": "_users",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 187,
																			"src": "1029:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 214,
																		"indexExpression": {
																			"id": 213,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 193,
																			"src": "1036:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1029:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 211,
																	"name": "WhitelistedAddressAdded",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 147,
																	"src": "1005:23:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
																		"typeString": "function (address)"
																	}
																},
																"id": 215,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1005:34:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 216,
															"nodeType": "EmitStatement",
															"src": "1000:39:2"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 196,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 193,
														"src": "919:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 197,
															"name": "_users",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 187,
															"src": "923:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																"typeString": "address[] calldata"
															}
														},
														"id": 198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "923:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "919:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 218,
												"initializationExpression": {
													"assignments": [
														193
													],
													"declarations": [
														{
															"constant": false,
															"id": 193,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 218,
															"src": "904:9:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 192,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "904:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 195,
													"initialValue": {
														"hexValue": "30",
														"id": 194,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "916:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "904:13:2"
												},
												"loopExpression": {
													"expression": {
														"id": 201,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "938:3:2",
														"subExpression": {
															"id": 200,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "938:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 202,
													"nodeType": "ExpressionStatement",
													"src": "938:3:2"
												},
												"nodeType": "ForStatement",
												"src": "899:152:2"
											}
										]
									},
									"documentation": {
										"id": 184,
										"nodeType": "StructuredDocumentation",
										"src": "751:52:2",
										"text": " @dev add addresses to whitelist"
									},
									"functionSelector": "e2ec6ec3",
									"id": 220,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 190,
											"modifierName": {
												"id": 189,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "878:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "878:9:2"
										}
									],
									"name": "addAddressesToWhitelist",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "_users",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "842:25:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 185,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "842:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 186,
													"nodeType": "ArrayTypeName",
													"src": "842:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "841:27:2"
									},
									"returnParameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "888:0:2"
									},
									"scope": 290,
									"src": "809:249:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 238,
										"nodeType": "Block",
										"src": "1204:91:2",
										"statements": [
											{
												"expression": {
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 228,
															"name": "whitelist",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 143,
															"src": "1215:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 230,
														"indexExpression": {
															"id": 229,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "1225:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1215:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 231,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1234:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1215:24:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 233,
												"nodeType": "ExpressionStatement",
												"src": "1215:24:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 235,
															"name": "_user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "1281:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 234,
														"name": "WhitelistedAddressRemoved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 151,
														"src": "1255:25:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1255:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 237,
												"nodeType": "EmitStatement",
												"src": "1250:37:2"
											}
										]
									},
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "1066:62:2",
										"text": " @dev remove single address from whitelist"
									},
									"functionSelector": "286dd3f5",
									"id": 239,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 226,
											"modifierName": {
												"id": 225,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1194:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1194:9:2"
										}
									],
									"name": "removeAddressFromWhitelist",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "1170:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1170:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1169:15:2"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1204:0:2"
									},
									"scope": 290,
									"src": "1134:161:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 275,
										"nodeType": "Block",
										"src": "1450:173:2",
										"statements": [
											{
												"body": {
													"id": 273,
													"nodeType": "Block",
													"src": "1505:111:2",
													"statements": [
														{
															"expression": {
																"id": 265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 259,
																		"name": "whitelist",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 143,
																		"src": "1520:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 263,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 260,
																			"name": "_users",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 243,
																			"src": "1530:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 262,
																		"indexExpression": {
																			"id": 261,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 249,
																			"src": "1537:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1530:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1520:20:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 264,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1543:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "1520:28:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 266,
															"nodeType": "ExpressionStatement",
															"src": "1520:28:2"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"baseExpression": {
																			"id": 268,
																			"name": "_users",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 243,
																			"src": "1594:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																				"typeString": "address[] calldata"
																			}
																		},
																		"id": 270,
																		"indexExpression": {
																			"id": 269,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 249,
																			"src": "1601:1:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1594:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 267,
																	"name": "WhitelistedAddressRemoved",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 151,
																	"src": "1568:25:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
																		"typeString": "function (address)"
																	}
																},
																"id": 271,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1568:36:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 272,
															"nodeType": "EmitStatement",
															"src": "1563:41:2"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 252,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 249,
														"src": "1481:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 253,
															"name": "_users",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "1485:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																"typeString": "address[] calldata"
															}
														},
														"id": 254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1485:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1481:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 274,
												"initializationExpression": {
													"assignments": [
														249
													],
													"declarations": [
														{
															"constant": false,
															"id": 249,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 274,
															"src": "1466:9:2",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 248,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1466:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 251,
													"initialValue": {
														"hexValue": "30",
														"id": 250,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1478:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1466:13:2"
												},
												"loopExpression": {
													"expression": {
														"id": 257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1500:3:2",
														"subExpression": {
															"id": 256,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 249,
															"src": "1500:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 258,
													"nodeType": "ExpressionStatement",
													"src": "1500:3:2"
												},
												"nodeType": "ForStatement",
												"src": "1461:155:2"
											}
										]
									},
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "1303:57:2",
										"text": " @dev remove addresses from whitelist"
									},
									"functionSelector": "24953eaa",
									"id": 276,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 246,
											"modifierName": {
												"id": 245,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1440:9:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "1440:9:2"
										}
									],
									"name": "removeAddressesFromWhitelist",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "_users",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "1404:25:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 241,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1404:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 242,
													"nodeType": "ArrayTypeName",
													"src": "1404:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1403:27:2"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1450:0:2"
									},
									"scope": 290,
									"src": "1366:257:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 288,
										"nodeType": "Block",
										"src": "1774:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 284,
														"name": "whitelist",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 143,
														"src": "1792:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 286,
													"indexExpression": {
														"id": 285,
														"name": "_user",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 279,
														"src": "1802:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1792:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 283,
												"id": 287,
												"nodeType": "Return",
												"src": "1785:23:2"
											}
										]
									},
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "1631:72:2",
										"text": " @dev getter to determine if address is in whitelist"
									},
									"functionSelector": "3af32abf",
									"id": 289,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isWhitelisted",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "_user",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "1732:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1732:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1731:15:2"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 289,
												"src": "1768:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 281,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1768:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1767:6:2"
									},
									"scope": 290,
									"src": "1709:107:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 291,
							"src": "116:1703:2"
						}
					],
					"src": "33:1786:2"
				},
				"id": 2
			}
		}
	}
}