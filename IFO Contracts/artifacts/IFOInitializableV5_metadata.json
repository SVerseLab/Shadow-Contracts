{
	"compiler": {
		"version": "0.8.5+commit.a4f2e591"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountTokens",
						"type": "uint256"
					}
				],
				"name": "AdminTokenRecovery",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountLP",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amountOfferingToken",
						"type": "uint256"
					}
				],
				"name": "AdminWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "offeringAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "excessAmount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "pid",
						"type": "uint8"
					}
				],
				"name": "CreateVestingSchedule",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "pid",
						"type": "uint8"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "offeringAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "excessAmount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint8",
						"name": "pid",
						"type": "uint8"
					}
				],
				"name": "Harvest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "startBlock",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "endBlock",
						"type": "uint256"
					}
				],
				"name": "NewStartAndEndBlocks",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "offeringAmountPool",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "raisingAmountPool",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "pid",
						"type": "uint8"
					}
				],
				"name": "PoolParametersSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "beneficiary",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Released",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Revoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "WhitelistedAddressAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "WhitelistedAddressRemoved",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "IFO_FACTORY",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_BUFFER_BLOCKS",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "NUMBER_POOLS",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "addAddressToWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_users",
						"type": "address[]"
					}
				],
				"name": "addAddressesToWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "campaignId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_holder",
						"type": "address"
					}
				],
				"name": "computeNextVestingScheduleIdForHolder",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_vestingScheduleId",
						"type": "bytes32"
					}
				],
				"name": "computeReleasableAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "computeVestingScheduleIdForAddressAndIndex",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "computeVestingScheduleIdForAddressAndPid",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "_pid",
						"type": "uint8"
					}
				],
				"name": "depositPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "endBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_lpAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_offerAmount",
						"type": "uint256"
					}
				],
				"name": "finalWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_vestingScheduleId",
						"type": "bytes32"
					}
				],
				"name": "getVestingSchedule",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isVestingInitialized",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "beneficiary",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "pid",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "amountTotal",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "released",
								"type": "uint256"
							}
						],
						"internalType": "struct IFOInitializableV5.VestingSchedule",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_holder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "getVestingScheduleByAddressAndIndex",
				"outputs": [
					{
						"components": [
							{
								"internalType": "bool",
								"name": "isVestingInitialized",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "beneficiary",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "pid",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "amountTotal",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "released",
								"type": "uint256"
							}
						],
						"internalType": "struct IFOInitializableV5.VestingSchedule",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_index",
						"type": "uint256"
					}
				],
				"name": "getVestingScheduleIdAtIndex",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVestingSchedulesCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_beneficiary",
						"type": "address"
					}
				],
				"name": "getVestingSchedulesCountByBeneficiary",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVestingSchedulesTotalAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWithdrawableOfferingTokenAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_pid",
						"type": "uint8"
					}
				],
				"name": "harvestPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "iShdw",
				"outputs": [
					{
						"internalType": "contract IShdw",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_lpToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_offeringToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_startBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_maxBufferBlocks",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_adminAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_iShdwAddress",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isInitialized",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "isQualifiedWhitelist",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "isWhitelisted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lpToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "offeringToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_tokenAmount",
						"type": "uint256"
					}
				],
				"name": "recoverWrongTokens",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_vestingScheduleId",
						"type": "bytes32"
					}
				],
				"name": "release",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "removeAddressFromWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_users",
						"type": "address[]"
					}
				],
				"name": "removeAddressesFromWhitelist",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "revoke",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_offeringAmountPool",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_raisingAmountPool",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_limitPerUserInLP",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_hasTax",
						"type": "bool"
					},
					{
						"internalType": "uint8",
						"name": "_pid",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "_isSpecialSale",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "_vestingPercentage",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_vestingCliff",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_vestingDuration",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_vestingSlicePeriodSeconds",
						"type": "uint256"
					}
				],
				"name": "setPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalTokensOffered",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_startBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endBlock",
						"type": "uint256"
					}
				],
				"name": "updateStartAndEndBlocks",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userCreditUsed",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vestingRevoked",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vestingStartTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "viewPoolInformation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "viewPoolTaxRateOverflow",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "viewPoolVestingInformation",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint8[]",
						"name": "_pids",
						"type": "uint8[]"
					}
				],
				"name": "viewUserAllocationPools",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint8[]",
						"name": "_pids",
						"type": "uint8[]"
					}
				],
				"name": "viewUserInfo",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bool[]",
						"name": "",
						"type": "bool[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint8[]",
						"name": "_pids",
						"type": "uint8[]"
					}
				],
				"name": "viewUserOfferingAndRefundingAmountsForPools",
				"outputs": [
					{
						"internalType": "uint256[3][]",
						"name": "",
						"type": "uint256[3][]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addAddressToWhitelist(address)": {
					"details": "add single address to whitelist"
				},
				"addAddressesToWhitelist(address[])": {
					"details": "add addresses to whitelist"
				},
				"computeNextVestingScheduleIdForHolder(address)": {
					"returns": {
						"_0": "The id string"
					}
				},
				"computeReleasableAmount(bytes32)": {
					"returns": {
						"_0": "The number of vested count"
					}
				},
				"computeVestingScheduleIdForAddressAndIndex(address,uint256)": {
					"returns": {
						"_0": "The id string"
					}
				},
				"computeVestingScheduleIdForAddressAndPid(address,uint256)": {
					"returns": {
						"_0": "The id string"
					}
				},
				"depositPool(uint256,uint8)": {
					"params": {
						"_amount": ": the number of LP token used (18 decimals)",
						"_pid": ": pool id"
					}
				},
				"finalWithdraw(uint256,uint256)": {
					"details": "This function is only callable by admin.",
					"params": {
						"_lpAmount": ": the number of LP token to withdraw (18 decimals)",
						"_offerAmount": ": the number of offering amount to withdraw"
					}
				},
				"getVestingSchedule(bytes32)": {
					"returns": {
						"_0": "The vesting schedule object"
					}
				},
				"getVestingScheduleByAddressAndIndex(address,uint256)": {
					"returns": {
						"_0": "The vesting schedule object"
					}
				},
				"getVestingScheduleIdAtIndex(uint256)": {
					"returns": {
						"_0": "The vesting schedule id"
					}
				},
				"getVestingSchedulesCount()": {
					"returns": {
						"_0": "The number of vesting count"
					}
				},
				"getVestingSchedulesCountByBeneficiary(address)": {
					"returns": {
						"_0": "The number of vesting schedules"
					}
				},
				"getVestingSchedulesTotalAmount()": {
					"returns": {
						"_0": "The vesting schedule total amount"
					}
				},
				"getWithdrawableOfferingTokenAmount()": {
					"returns": {
						"_0": "The amount of offering token"
					}
				},
				"harvestPool(uint8)": {
					"params": {
						"_pid": ": pool id"
					}
				},
				"initialize(address,address,uint256,uint256,uint256,address,address)": {
					"details": "It can only be called once.",
					"params": {
						"_adminAddress": ": the admin address for handling tokens",
						"_endBlock": ": the end block for the IFO",
						"_iShdwAddress": ": the address of the IShdw",
						"_lpToken": ": the LP token used",
						"_maxBufferBlocks": ": maximum buffer of blocks from the current block number",
						"_offeringToken": ": the token that is offered for the IFO",
						"_startBlock": ": the start block for the IFO"
					}
				},
				"isWhitelisted(address)": {
					"details": "getter to determine if address is in whitelist"
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"recoverWrongTokens(address,uint256)": {
					"details": "This function is only callable by admin.",
					"params": {
						"_tokenAddress": ": the address of the token to withdraw (18 decimals)",
						"_tokenAmount": ": the number of token amount to withdraw"
					}
				},
				"release(bytes32)": {
					"params": {
						"_vestingScheduleId": "the vesting schedule identifier"
					}
				},
				"removeAddressFromWhitelist(address)": {
					"details": "remove single address from whitelist"
				},
				"removeAddressesFromWhitelist(address[])": {
					"details": "remove addresses from whitelist"
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setPool(uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256,uint256)": {
					"details": "This function is only callable by admin.",
					"params": {
						"_hasTax": ": if the pool has a tax",
						"_isSpecialSale": ": flag to set is special or public sale",
						"_limitPerUserInLP": ": limit per user (in LP tokens)",
						"_offeringAmountPool": ": offering amount (in tokens)",
						"_pid": ": pool id",
						"_raisingAmountPool": ": raising amount (in LP tokens)",
						"_vestingCliff": ": cliff of vesting",
						"_vestingDuration": ": duration of vesting",
						"_vestingPercentage": ": percentage for vesting remain tokens after end IFO",
						"_vestingSlicePeriodSeconds": ": slice period seconds of vesting"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateStartAndEndBlocks(uint256,uint256)": {
					"details": "This function is only callable by admin.",
					"params": {
						"_endBlock": ": the new end block",
						"_startBlock": ": the new start block"
					}
				},
				"viewPoolInformation(uint256)": {
					"params": {
						"_pid": ": pool id"
					},
					"returns": {
						"_0": "raisingAmountPool: amount of LP tokens raised (in LP tokens)",
						"_1": "offeringAmountPool: amount of tokens offered for the pool (in offeringTokens)",
						"_2": "limitPerUserInLP; // limit of tokens per user (if 0, it is ignored)",
						"_3": "hasTax: tax on the overflow (if any, it works with _calculateTaxOverflow)",
						"_4": "totalAmountPool: total amount pool deposited (in LP tokens)",
						"_5": "sumTaxesOverflow: total taxes collected (starts at 0, increases with each harvest if overflow)"
					}
				},
				"viewPoolTaxRateOverflow(uint256)": {
					"details": "100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)",
					"params": {
						"_pid": ": pool id"
					},
					"returns": {
						"_0": "It returns the tax percentage"
					}
				},
				"viewPoolVestingInformation(uint256)": {
					"params": {
						"_pid": ": pool id"
					},
					"returns": {
						"_0": "vestingPercentage: the percentage of vesting part, claimingPercentage + vestingPercentage should be 100",
						"_1": "vestingCliff: the cliff of vesting",
						"_2": "vestingDuration: the duration of vesting",
						"_3": "vestingSlicePeriodSeconds: the slice period seconds of vesting"
					}
				},
				"viewUserAllocationPools(address,uint8[])": {
					"params": {
						"_pids": "[]: array of pids",
						"_user": ": user address"
					},
					"returns": {
						"_0": ""
					}
				},
				"viewUserInfo(address,uint8[])": {
					"params": {
						"_pids": "[]: array of pids",
						"_user": ": user address"
					}
				},
				"viewUserOfferingAndRefundingAmountsForPools(address,uint8[])": {
					"params": {
						"_pids": ": array of pids",
						"_user": ": user address"
					}
				}
			},
			"title": "IFOInitializableV5",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"computeNextVestingScheduleIdForHolder(address)": {
					"notice": "Computes the next vesting schedule identifier for a given holder address"
				},
				"computeReleasableAmount(bytes32)": {
					"notice": "Returns the vested amount of tokens for the given vesting schedule identifier"
				},
				"computeVestingScheduleIdForAddressAndIndex(address,uint256)": {
					"notice": "Computes the next vesting schedule identifier for an address and an index"
				},
				"computeVestingScheduleIdForAddressAndPid(address,uint256)": {
					"notice": "Computes the next vesting schedule identifier for an address and an pid"
				},
				"constructor": {
					"notice": "Constructor"
				},
				"depositPool(uint256,uint8)": {
					"notice": "It allows users to deposit LP tokens to pool"
				},
				"finalWithdraw(uint256,uint256)": {
					"notice": "It allows the admin to withdraw funds"
				},
				"getVestingSchedule(bytes32)": {
					"notice": "Returns the vesting schedule information of a given identifier"
				},
				"getVestingScheduleByAddressAndIndex(address,uint256)": {
					"notice": "Returns the vesting schedule information of a given holder and index"
				},
				"getVestingScheduleIdAtIndex(uint256)": {
					"notice": "Returns the vesting schedule id at the given index"
				},
				"getVestingSchedulesCount()": {
					"notice": "Returns the number of vesting schedules managed by the contract"
				},
				"getVestingSchedulesCountByBeneficiary(address)": {
					"notice": "Returns the number of vesting schedules associated to a beneficiary"
				},
				"getVestingSchedulesTotalAmount()": {
					"notice": "Returns the total amount of vesting schedules"
				},
				"getWithdrawableOfferingTokenAmount()": {
					"notice": "Returns the amount of offering token that can be withdrawn by the owner"
				},
				"harvestPool(uint8)": {
					"notice": "It allows users to harvest from pool"
				},
				"initialize(address,address,uint256,uint256,uint256,address,address)": {
					"notice": "It initializes the contract"
				},
				"recoverWrongTokens(address,uint256)": {
					"notice": "It allows the admin to recover wrong tokens sent to the contract"
				},
				"release(bytes32)": {
					"notice": "Release vested amount of offering tokens"
				},
				"revoke()": {
					"notice": "Revokes all the vesting schedules"
				},
				"setPool(uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256,uint256)": {
					"notice": "It sets parameters for pool"
				},
				"updateStartAndEndBlocks(uint256,uint256)": {
					"notice": "It allows the admin to update start and end blocks"
				},
				"viewPoolInformation(uint256)": {
					"notice": "It returns the pool information"
				},
				"viewPoolTaxRateOverflow(uint256)": {
					"notice": "It returns the tax overflow rate calculated for a pool"
				},
				"viewPoolVestingInformation(uint256)": {
					"notice": "It returns the pool vesting information"
				},
				"viewUserAllocationPools(address,uint8[])": {
					"notice": "External view function to see user allocations for both pools"
				},
				"viewUserInfo(address,uint8[])": {
					"notice": "External view function to see user information"
				},
				"viewUserOfferingAndRefundingAmountsForPools(address,uint8[])": {
					"notice": "External view function to see user offering and refunding amounts for both pools"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/IFOInitializableV5.sol": "IFOInitializableV5"
		},
		"evmVersion": "berlin",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x195b2cbb885d06ea30ed9eed359fc0e48d4bef32b542f54f7924f2135655e641",
			"license": "MIT",
			"urls": [
				"bzz-raw://d644d10d87b16514e05eb98b10140a71df8bf9d4eadf9de81df33d4769fb90e3",
				"dweb:/ipfs/QmZLRJbcbHSkkQXF16o1TLQXhNbAKpztbnwM3RSBWq52dR"
			]
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"keccak256": "0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010",
				"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
			"license": "MIT",
			"urls": [
				"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
				"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
			"keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
				"dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
			]
		},
		"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
			"keccak256": "0xe3e24ceb68b8b87f6c1c74b23531302ba174694bdc9d01e32241769eb9f4b688",
			"license": "MIT",
			"urls": [
				"bzz-raw://744c232b440482b7db675828a9044108758ecea3401188bf368d627b19f62620",
				"dweb:/ipfs/QmV59W4QyniE6rG4KiqEtvgK7Tv2F8jg2frvuEzmpJGmjE"
			]
		},
		"@openzeppelin/contracts/utils/Address.sol": {
			"keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
			"license": "MIT",
			"urls": [
				"bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
				"dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		},
		"contracts/IFOInitializableV5.sol": {
			"keccak256": "0x694548053d74c98a2940a0d4319bdc4129f6415469966fee1a1ab27024854e3b",
			"license": "MIT",
			"urls": [
				"bzz-raw://55988c630c3e58864f565204e67aa052ed940781d7690337ebc6e58941c5b01f",
				"dweb:/ipfs/QmNpdFhXJ8nSju5N9czGJABHuLZUSgb1MxnbKYLHNZZsza"
			]
		},
		"contracts/IShdw.sol": {
			"keccak256": "0x8193139c4d7ea60d848e44cb43ee15912e27ea94b72ca23d2208c260724650d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://52d37aae748de2903ddf9b7f7c41df153b097d63401064e0bac758d9b1bbeceb",
				"dweb:/ipfs/QmPipu1eeSYJzyio8T1GFWobhZfRL6bgH9ZUiVwChXdVGq"
			]
		},
		"contracts/interfaces/IIFOV5.sol": {
			"keccak256": "0x01240eae15e1e202bfeebd731dcd31bfb565320de28a65c51208cee5b620465e",
			"license": "MIT",
			"urls": [
				"bzz-raw://15b0c8e96f6ea802796801abf92f7439126549484bea94148621a605eda63c09",
				"dweb:/ipfs/QmfQKvu2aXW8CFzn9P67TPWTK9hq83ncKyUX74ewsJAYq1"
			]
		},
		"contracts/interfaces/IShdwPool.sol": {
			"keccak256": "0x168618f48dae1c7c4b4c011d79d087c41acb8db25351f34a9f4fd3816a8b6d24",
			"license": "MIT",
			"urls": [
				"bzz-raw://a4e81d2cac370555133aa2f7ee40bbdf35b5aa4da69a05ba99f9d53068558219",
				"dweb:/ipfs/QmPqnnefBCvkkeTF9SJAJdJs1zNVybUmwCTEG6SSoR6LxT"
			]
		},
		"contracts/utils/WhiteList.sol": {
			"keccak256": "0x0ecb33d5d02bcd2dc5a42e23ca46dc9637cfb5c550f6c12c611fcc7ef50ec617",
			"license": "MIT",
			"urls": [
				"bzz-raw://83ea30dd73f16cf015bb0cf9e211a176426c6aca584b90ac767806721ffe9fce",
				"dweb:/ipfs/QmeutDL3btmgW9FT1UCh8kdaLcXDHUGcpbPabKrZfVzoUN"
			]
		}
	},
	"version": 1
}